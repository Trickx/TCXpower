function [watts,timestamps_dt] = parseTCX(tcx_struct)
%parseTCX converts TCX based xml file into a MATLAB structure
%
% outStruct = xml2struct2(input)
% 
% xml2struct2 takes either a java xml object, an xml file, or a string in
% xml format as input and returns a parsed xml tree in structure. 
% 
% Please note that the following characters are substituted
% '-' by '_dash_', ':' by '_colon_' and '.' by '_dot_'
%
% Originally written by W. Falkena, ASTI, TUDelft, 21-08-2010
% Attribute parsing speed increase by 40% by A. Wanner, 14-6-2011
% Added CDATA support by I. Smirnov, 20-3-2012
% Modified by X. Mo, University of Wisconsin, 12-5-2012
% Modified by Chao-Yuan Yeh, August 2016

%Get number of laps and trackpoints within
absolutePoints = 0;
lapPoints = zeros(1, length(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap(:)));

if length(lapPoints) == 1
    lapPoints(1) = length(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap.Track.Trackpoint(:));
else
    for lap = 1:1:length(lapPoints)
        lapPoints(lap) = length(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap{1, lap}.Track.Trackpoint(:));
    end
end

% Initialize datarecords
watts = NaN(1, absolutePoints);
powertap_time = zeros(1, absolutePoints);
timestamps_dt = NaT(1, absolutePoints);

% Read watts and time stamps
index = 0;
for lap = 1:1:length(lapPoints)
    for point = 1:1:lapPoints(lap)
        skip = false(1);
        index = index + 1;
        try
            if length(lapPoints) == 1
                watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap.Track.Trackpoint{1, point}.Extensions.ns3_colon_TPX.ns3_colon_Watts.Text);
            else
                watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap{1, lap}.Track.Trackpoint{1, point}.Extensions.ns3_colon_TPX.ns3_colon_Watts.Text);
            end
        catch
            try
                if length(lapPoints) == 1
                    watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap.Track.Trackpoint{1, point}.Extensions.TPX.Watts.Text);
                else
                    watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap{1, lap}.Track.Trackpoint{1, point}.Extensions.TPX.Watts.Text);
                end
            catch
                try
                    if length(lapPoints) == 1
                        watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap.Track.Trackpoint{1, point}.Extensions.ns3_TPX.ns3_Watts.Text);
                    else
                        watts(index) = str2double(tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap{1, lap}.Track.Trackpoint{1, point}.Extensions.ns3_TPX.ns3_Watts.Text);
                    end
                catch
                    fprintf('Exception caught.\nEither the XML Watt extension is not known\n or a watt mesurements is missing in lap %d at position %d\n', lap, point);
                    fprintf(' Ignoring this record.\n');
                    index = index - 1;
                    skip = true(1);
                end
            end
        end
        
        if (skip ~= true)
            skip = false(1);
            if length(lapPoints) == 1
                str = tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap.Track.Trackpoint{1, point}.Time.Text;
            else
                str = tcx_struct.TrainingCenterDatabase.Activities.Activity.Lap{1, lap}.Track.Trackpoint{1, point}.Time.Text;
            end
            
            try
                powertap_time (index) = datenum(str,'yyyy-mm-ddTHH:MM:SS.FFFZ');
            catch
                powertap_time (index) = datenum(str,'yyyy-mm-ddTHH:MM:SSZ');
            end
            timestamps_dt (index) = datetime(powertap_time (index),'ConvertFrom','datenum');
        end
    end
end

%Sometimes at lap boundaries duplicate time entries may occur.
%This leads to problems in post-processing when timetables are used.
for index = 2:1:length(timestamps_dt)
    if timestamps_dt(index-1)==timestamps_dt(index)
        fprintf('Warning duplicate consecutive timestamps have been detected.\n');
        fprintf(' Adding a milliseond at %d\n', index);
        timestamps_dt(index) = timestamps_dt(index) + seconds(0.001);
    end
end

end